// Generated by Molecule 0.7.2

#define MOLECULEC_VERSION 7002
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef TAPROOT_LOCK_H
#define TAPROOT_LOCK_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_TAPROOT_LOCK
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#include "blockchain.h"

/*
 * Reader APIs
 */

MOLECULE_API_DECORATOR  mol_errno       MolReader_TaprootScriptPath_verify              (const mol_seg_t*, bool);
#define                                 MolReader_TaprootScriptPath_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_TaprootScriptPath_has_extra_fields(s) mol_table_has_extra_fields(s, 7)
#define                                 MolReader_TaprootScriptPath_get_taproot_output_key(s) mol_table_slice_by_index(s, 0)
#define                                 MolReader_TaprootScriptPath_get_taproot_internal_key(s) mol_table_slice_by_index(s, 1)
#define                                 MolReader_TaprootScriptPath_get_smt_root(s)     mol_table_slice_by_index(s, 2)
#define                                 MolReader_TaprootScriptPath_get_smt_proof(s)    mol_table_slice_by_index(s, 3)
#define                                 MolReader_TaprootScriptPath_get_y_parity(s)     mol_table_slice_by_index(s, 4)
#define                                 MolReader_TaprootScriptPath_get_exec_script(s)  mol_table_slice_by_index(s, 5)
#define                                 MolReader_TaprootScriptPath_get_args2(s)        mol_table_slice_by_index(s, 6)
MOLECULE_API_DECORATOR  mol_errno       MolReader_TaprootScriptPathOpt_verify           (const mol_seg_t*, bool);
#define                                 MolReader_TaprootScriptPathOpt_is_none(s)       mol_option_is_none(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_TaprootLockWitnessLock_verify         (const mol_seg_t*, bool);
#define                                 MolReader_TaprootLockWitnessLock_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_TaprootLockWitnessLock_has_extra_fields(s) mol_table_has_extra_fields(s, 2)
#define                                 MolReader_TaprootLockWitnessLock_get_signature(s) mol_table_slice_by_index(s, 0)
#define                                 MolReader_TaprootLockWitnessLock_get_script_path(s) mol_table_slice_by_index(s, 1)

/*
 * Builder APIs
 */

#define                                 MolBuilder_TaprootScriptPath_init(b)            mol_table_builder_initialize(b, 1024, 7)
#define                                 MolBuilder_TaprootScriptPath_set_taproot_output_key(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_TaprootScriptPath_set_taproot_internal_key(b, p, l) mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_TaprootScriptPath_set_smt_root(b, p, l) mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_TaprootScriptPath_set_smt_proof(b, p, l) mol_table_builder_add(b, 3, p, l)
#define                                 MolBuilder_TaprootScriptPath_set_y_parity(b, p) mol_table_builder_add_byte(b, 4, p)
#define                                 MolBuilder_TaprootScriptPath_set_exec_script(b, p, l) mol_table_builder_add(b, 5, p, l)
#define                                 MolBuilder_TaprootScriptPath_set_args2(b, p, l) mol_table_builder_add(b, 6, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_TaprootScriptPath_build              (mol_builder_t);
#define                                 MolBuilder_TaprootScriptPath_clear(b)           mol_builder_discard(b)
#define                                 MolBuilder_TaprootScriptPathOpt_init(b)         mol_builder_initialize_fixed_size(b, 0)
#define                                 MolBuilder_TaprootScriptPathOpt_set(b, p, l)    mol_option_builder_set(b, p, l)
#define                                 MolBuilder_TaprootScriptPathOpt_build(b)        mol_builder_finalize_simple(b)
#define                                 MolBuilder_TaprootScriptPathOpt_clear(b)        mol_builder_discard(b)
#define                                 MolBuilder_TaprootLockWitnessLock_init(b)       mol_table_builder_initialize(b, 64, 2)
#define                                 MolBuilder_TaprootLockWitnessLock_set_signature(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_TaprootLockWitnessLock_set_script_path(b, p, l) mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_TaprootLockWitnessLock_build         (mol_builder_t);
#define                                 MolBuilder_TaprootLockWitnessLock_clear(b)      mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_TaprootScriptPath[190] =  {
    0xbe, ____, ____, ____, 0x20, ____, ____, ____, 0x40, ____, ____, ____,
    0x60, ____, ____, ____, 0x80, ____, ____, ____, 0x84, ____, ____, ____,
    0x85, ____, ____, ____, 0xba, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, 0x35, ____, ____, ____, 0x10, ____, ____, ____, 0x30, ____, ____,
    ____, 0x31, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_TaprootScriptPathOpt[0] =  {};
MOLECULE_API_DECORATOR const uint8_t MolDefault_TaprootLockWitnessLock[12] =  {
    0x0c, ____, ____, ____, 0x0c, ____, ____, ____, 0x0c, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_TaprootScriptPath_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 7) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 7) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Byte32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Byte32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Byte32_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        if (offsets[5] - offsets[4] != 1) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[5];
        inner.size = offsets[6] - offsets[5];
        errno = MolReader_Script_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[6];
        inner.size = offsets[7] - offsets[6];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_TaprootScriptPathOpt_verify (const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_TaprootScriptPath_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}
MOLECULE_API_DECORATOR mol_errno MolReader_TaprootLockWitnessLock_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_BytesOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_TaprootScriptPathOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_TaprootScriptPath_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 32;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 32 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 1 : len;
    len = builder.number_ptr[11];
    res.seg.size += len == 0 ? 53 : len;
    len = builder.number_ptr[13];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 32 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 1 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[11];
    offset += len == 0 ? 53 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[13];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_Byte32, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_Byte32, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 32;
        memcpy(dst, &MolDefault_Byte32, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 1;
        *dst = 0;
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[11];
    if (len == 0) {
        len = 53;
        memcpy(dst, &MolDefault_Script, len);
    } else {
        mol_num_t of = builder.number_ptr[10];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[13];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[12];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_TaprootLockWitnessLock_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 0 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 0 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 0 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 0 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_BytesOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_TaprootScriptPathOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_TAPROOT_LOCK
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_TAPROOT_LOCK
#endif /* __DEFINE_MOLECULE_API_DECORATOR_TAPROOT_LOCK */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* TAPROOT_LOCK_H */
