// Generated by Molecule 0.7.0

#define MOLECULEC_VERSION 7000
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef XUDT_RCE_H
#define XUDT_RCE_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_XUDT_RCE
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#include "blockchain.h"

/*
 * Reader APIs
 */

MOLECULE_API_DECORATOR  mol_errno       MolReader_ScriptVec_verify                      (const mol_seg_t*, bool);
#define                                 MolReader_ScriptVec_length(s)                   mol_dynvec_length(s)
#define                                 MolReader_ScriptVec_get(s, i)                   mol_dynvec_slice_by_index(s, i)

/*
 * Builder APIs
 */

#define                                 MolBuilder_ScriptVec_init(b)                    mol_builder_initialize_with_capacity(b, 1024, 64)
#define                                 MolBuilder_ScriptVec_push(b, p, l)              mol_dynvec_builder_push(b, p, l)
#define                                 MolBuilder_ScriptVec_build(b)                   mol_dynvec_builder_finalize(b)
#define                                 MolBuilder_ScriptVec_clear(b)                   mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_ScriptVec[4]     =  {0x04, ____, ____, ____};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_ScriptVec_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size == MOL_NUM_T_SIZE) {
        return MOL_OK;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t item_count = offset / 4 - 1;
    if (input->size < MOL_NUM_T_SIZE*(item_count+1)) {
        return MOL_ERR_HEADER;
    }
    mol_num_t end;
    for (mol_num_t i=1; i<item_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        end = mol_unpack_number(ptr);
        if (offset > end) {
            return MOL_ERR_OFFSET;
        }
        mol_seg_t inner;
        inner.ptr = input->ptr + offset;
        inner.size = end - offset;
        mol_errno errno = MolReader_Script_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        offset = end;
    }
    if (offset > total_size) {
        return MOL_ERR_OFFSET;
    }
    mol_seg_t inner;
    inner.ptr = input->ptr + offset;
    inner.size = total_size - offset;
    return MolReader_Script_verify(&inner, compatible);
}

/*
 * Builder Functions
 */


#ifdef __DEFINE_MOLECULE_API_DECORATOR_XUDT_RCE
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_XUDT_RCE
#endif /* __DEFINE_MOLECULE_API_DECORATOR_XUDT_RCE */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* XUDT_RCE_H */
